module.exports = {
  // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  typeDefs:
    // Please don't change this file manually but run `prisma generate` to update it.
    // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

    /* GraphQL */ `
      type Admin {
        id: ID!
        name: String!
        email: String!
        password: String!
        language: String
        schedules(
          where: ScheduleWhereInput
          orderBy: ScheduleOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Schedule!]
        users(
          where: UserWhereInput
          orderBy: UserOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [User!]
      }

      type AdminConnection {
        pageInfo: PageInfo!
        edges: [AdminEdge]!
        aggregate: AggregateAdmin!
      }

      input AdminCreateInput {
        id: ID
        name: String!
        email: String!
        password: String!
        language: String
        schedules: ScheduleCreateManyWithoutOwnerInput
        users: UserCreateManyWithoutOwnerInput
      }

      input AdminCreateOneWithoutSchedulesInput {
        create: AdminCreateWithoutSchedulesInput
        connect: AdminWhereUniqueInput
      }

      input AdminCreateOneWithoutUsersInput {
        create: AdminCreateWithoutUsersInput
        connect: AdminWhereUniqueInput
      }

      input AdminCreateWithoutSchedulesInput {
        id: ID
        name: String!
        email: String!
        password: String!
        language: String
        users: UserCreateManyWithoutOwnerInput
      }

      input AdminCreateWithoutUsersInput {
        id: ID
        name: String!
        email: String!
        password: String!
        language: String
        schedules: ScheduleCreateManyWithoutOwnerInput
      }

      type AdminEdge {
        node: Admin!
        cursor: String!
      }

      enum AdminOrderByInput {
        id_ASC
        id_DESC
        name_ASC
        name_DESC
        email_ASC
        email_DESC
        password_ASC
        password_DESC
        language_ASC
        language_DESC
      }

      type AdminPreviousValues {
        id: ID!
        name: String!
        email: String!
        password: String!
        language: String
      }

      type AdminSubscriptionPayload {
        mutation: MutationType!
        node: Admin
        updatedFields: [String!]
        previousValues: AdminPreviousValues
      }

      input AdminSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: AdminWhereInput
        AND: [AdminSubscriptionWhereInput!]
      }

      input AdminUpdateInput {
        name: String
        email: String
        password: String
        language: String
        schedules: ScheduleUpdateManyWithoutOwnerInput
        users: UserUpdateManyWithoutOwnerInput
      }

      input AdminUpdateManyMutationInput {
        name: String
        email: String
        password: String
        language: String
      }

      input AdminUpdateOneRequiredWithoutSchedulesInput {
        create: AdminCreateWithoutSchedulesInput
        update: AdminUpdateWithoutSchedulesDataInput
        upsert: AdminUpsertWithoutSchedulesInput
        connect: AdminWhereUniqueInput
      }

      input AdminUpdateOneRequiredWithoutUsersInput {
        create: AdminCreateWithoutUsersInput
        update: AdminUpdateWithoutUsersDataInput
        upsert: AdminUpsertWithoutUsersInput
        connect: AdminWhereUniqueInput
      }

      input AdminUpdateWithoutSchedulesDataInput {
        name: String
        email: String
        password: String
        language: String
        users: UserUpdateManyWithoutOwnerInput
      }

      input AdminUpdateWithoutUsersDataInput {
        name: String
        email: String
        password: String
        language: String
        schedules: ScheduleUpdateManyWithoutOwnerInput
      }

      input AdminUpsertWithoutSchedulesInput {
        update: AdminUpdateWithoutSchedulesDataInput!
        create: AdminCreateWithoutSchedulesInput!
      }

      input AdminUpsertWithoutUsersInput {
        update: AdminUpdateWithoutUsersDataInput!
        create: AdminCreateWithoutUsersInput!
      }

      input AdminWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        email: String
        email_not: String
        email_in: [String!]
        email_not_in: [String!]
        email_lt: String
        email_lte: String
        email_gt: String
        email_gte: String
        email_contains: String
        email_not_contains: String
        email_starts_with: String
        email_not_starts_with: String
        email_ends_with: String
        email_not_ends_with: String
        password: String
        password_not: String
        password_in: [String!]
        password_not_in: [String!]
        password_lt: String
        password_lte: String
        password_gt: String
        password_gte: String
        password_contains: String
        password_not_contains: String
        password_starts_with: String
        password_not_starts_with: String
        password_ends_with: String
        password_not_ends_with: String
        language: String
        language_not: String
        language_in: [String!]
        language_not_in: [String!]
        language_lt: String
        language_lte: String
        language_gt: String
        language_gte: String
        language_contains: String
        language_not_contains: String
        language_starts_with: String
        language_not_starts_with: String
        language_ends_with: String
        language_not_ends_with: String
        schedules_some: ScheduleWhereInput
        users_some: UserWhereInput
        AND: [AdminWhereInput!]
      }

      input AdminWhereUniqueInput {
        id: ID
        email: String
      }

      type AggregateAdmin {
        count: Int!
      }

      type AggregateSchedule {
        count: Int!
      }

      type AggregateUser {
        count: Int!
      }

      type BatchPayload {
        count: Long!
      }

      type BeforeHoliday {
        num: Int!
        id: String!
        isChecked: Boolean!
      }

      input BeforeHolidayCreateInput {
        num: Int!
        id: String!
        isChecked: Boolean!
      }

      input BeforeHolidayCreateManyInput {
        create: [BeforeHolidayCreateInput!]
      }

      input BeforeHolidayRestrictedWhereInput {
        num: Int
        num_not: Int
        num_in: [Int!]
        num_not_in: [Int!]
        num_lt: Int
        num_lte: Int
        num_gt: Int
        num_gte: Int
        id: String
        id_not: String
        id_in: [String!]
        id_not_in: [String!]
        id_lt: String
        id_lte: String
        id_gt: String
        id_gte: String
        id_contains: String
        id_not_contains: String
        id_starts_with: String
        id_not_starts_with: String
        id_ends_with: String
        id_not_ends_with: String
        isChecked: Boolean
        isChecked_not: Boolean
        AND: [BeforeHolidayRestrictedWhereInput!]
      }

      input BeforeHolidayScalarWhereInput {
        num: Int
        num_not: Int
        num_in: [Int!]
        num_not_in: [Int!]
        num_lt: Int
        num_lte: Int
        num_gt: Int
        num_gte: Int
        id: String
        id_not: String
        id_in: [String!]
        id_not_in: [String!]
        id_lt: String
        id_lte: String
        id_gt: String
        id_gte: String
        id_contains: String
        id_not_contains: String
        id_starts_with: String
        id_not_starts_with: String
        id_ends_with: String
        id_not_ends_with: String
        isChecked: Boolean
        isChecked_not: Boolean
        AND: [BeforeHolidayScalarWhereInput!]
        OR: [BeforeHolidayScalarWhereInput!]
        NOT: [BeforeHolidayScalarWhereInput!]
      }

      input BeforeHolidayUpdateManyDataInput {
        num: Int
        id: String
        isChecked: Boolean
      }

      input BeforeHolidayUpdateManyInput {
        create: [BeforeHolidayCreateInput!]
        deleteMany: [BeforeHolidayScalarWhereInput!]
        updateMany: [BeforeHolidayUpdateManyWithWhereNestedInput!]
      }

      input BeforeHolidayUpdateManyWithWhereNestedInput {
        where: BeforeHolidayScalarWhereInput!
        data: BeforeHolidayUpdateManyDataInput!
      }

      input BeforeHolidayWhereInput {
        num: Int
        num_not: Int
        num_in: [Int!]
        num_not_in: [Int!]
        num_lt: Int
        num_lte: Int
        num_gt: Int
        num_gte: Int
        id: String
        id_not: String
        id_in: [String!]
        id_not_in: [String!]
        id_lt: String
        id_lte: String
        id_gt: String
        id_gte: String
        id_contains: String
        id_not_contains: String
        id_starts_with: String
        id_not_starts_with: String
        id_ends_with: String
        id_not_ends_with: String
        isChecked: Boolean
        isChecked_not: Boolean
        AND: [BeforeHolidayWhereInput!]
      }

      type Day {
        id: ID!
        number: Int!
        weekday: Boolean
        weekend: Boolean
        holiday: Boolean
        beforeHoliday: Boolean
        kindOfDay: KindOfDay
      }

      input DayCreateInput {
        id: ID
        number: Int!
        weekday: Boolean
        weekend: Boolean
        holiday: Boolean
        beforeHoliday: Boolean
        kindOfDay: KindOfDayCreateOneInput
      }

      input DayCreateManyInput {
        create: [DayCreateInput!]
      }

      type DayOfEmployee {
        id: ID!
        number: Int!
        weekday: Boolean
        weekend: Boolean
        holiday: Boolean
        beforeHoliday: Boolean
        firstStartWork: String
        firstStopWork: String
        secondStartWork: String
        secondStopWork: String
        kind: Kind!
      }

      input DayOfEmployeeCreateInput {
        id: ID
        number: Int!
        weekday: Boolean
        weekend: Boolean
        holiday: Boolean
        beforeHoliday: Boolean
        firstStartWork: String
        firstStopWork: String
        secondStartWork: String
        secondStopWork: String
        kind: KindCreateOneInput!
      }

      input DayOfEmployeeCreateManyInput {
        create: [DayOfEmployeeCreateInput!]
      }

      input DayOfEmployeeRestrictedWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        number: Int
        number_not: Int
        number_in: [Int!]
        number_not_in: [Int!]
        number_lt: Int
        number_lte: Int
        number_gt: Int
        number_gte: Int
        weekday: Boolean
        weekday_not: Boolean
        weekend: Boolean
        weekend_not: Boolean
        holiday: Boolean
        holiday_not: Boolean
        beforeHoliday: Boolean
        beforeHoliday_not: Boolean
        firstStartWork: String
        firstStartWork_not: String
        firstStartWork_in: [String!]
        firstStartWork_not_in: [String!]
        firstStartWork_lt: String
        firstStartWork_lte: String
        firstStartWork_gt: String
        firstStartWork_gte: String
        firstStartWork_contains: String
        firstStartWork_not_contains: String
        firstStartWork_starts_with: String
        firstStartWork_not_starts_with: String
        firstStartWork_ends_with: String
        firstStartWork_not_ends_with: String
        firstStopWork: String
        firstStopWork_not: String
        firstStopWork_in: [String!]
        firstStopWork_not_in: [String!]
        firstStopWork_lt: String
        firstStopWork_lte: String
        firstStopWork_gt: String
        firstStopWork_gte: String
        firstStopWork_contains: String
        firstStopWork_not_contains: String
        firstStopWork_starts_with: String
        firstStopWork_not_starts_with: String
        firstStopWork_ends_with: String
        firstStopWork_not_ends_with: String
        secondStartWork: String
        secondStartWork_not: String
        secondStartWork_in: [String!]
        secondStartWork_not_in: [String!]
        secondStartWork_lt: String
        secondStartWork_lte: String
        secondStartWork_gt: String
        secondStartWork_gte: String
        secondStartWork_contains: String
        secondStartWork_not_contains: String
        secondStartWork_starts_with: String
        secondStartWork_not_starts_with: String
        secondStartWork_ends_with: String
        secondStartWork_not_ends_with: String
        secondStopWork: String
        secondStopWork_not: String
        secondStopWork_in: [String!]
        secondStopWork_not_in: [String!]
        secondStopWork_lt: String
        secondStopWork_lte: String
        secondStopWork_gt: String
        secondStopWork_gte: String
        secondStopWork_contains: String
        secondStopWork_not_contains: String
        secondStopWork_starts_with: String
        secondStopWork_not_starts_with: String
        secondStopWork_ends_with: String
        secondStopWork_not_ends_with: String
        kind: KindRestrictedWhereInput
        AND: [DayOfEmployeeRestrictedWhereInput!]
      }

      input DayOfEmployeeScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        number: Int
        number_not: Int
        number_in: [Int!]
        number_not_in: [Int!]
        number_lt: Int
        number_lte: Int
        number_gt: Int
        number_gte: Int
        weekday: Boolean
        weekday_not: Boolean
        weekend: Boolean
        weekend_not: Boolean
        holiday: Boolean
        holiday_not: Boolean
        beforeHoliday: Boolean
        beforeHoliday_not: Boolean
        firstStartWork: String
        firstStartWork_not: String
        firstStartWork_in: [String!]
        firstStartWork_not_in: [String!]
        firstStartWork_lt: String
        firstStartWork_lte: String
        firstStartWork_gt: String
        firstStartWork_gte: String
        firstStartWork_contains: String
        firstStartWork_not_contains: String
        firstStartWork_starts_with: String
        firstStartWork_not_starts_with: String
        firstStartWork_ends_with: String
        firstStartWork_not_ends_with: String
        firstStopWork: String
        firstStopWork_not: String
        firstStopWork_in: [String!]
        firstStopWork_not_in: [String!]
        firstStopWork_lt: String
        firstStopWork_lte: String
        firstStopWork_gt: String
        firstStopWork_gte: String
        firstStopWork_contains: String
        firstStopWork_not_contains: String
        firstStopWork_starts_with: String
        firstStopWork_not_starts_with: String
        firstStopWork_ends_with: String
        firstStopWork_not_ends_with: String
        secondStartWork: String
        secondStartWork_not: String
        secondStartWork_in: [String!]
        secondStartWork_not_in: [String!]
        secondStartWork_lt: String
        secondStartWork_lte: String
        secondStartWork_gt: String
        secondStartWork_gte: String
        secondStartWork_contains: String
        secondStartWork_not_contains: String
        secondStartWork_starts_with: String
        secondStartWork_not_starts_with: String
        secondStartWork_ends_with: String
        secondStartWork_not_ends_with: String
        secondStopWork: String
        secondStopWork_not: String
        secondStopWork_in: [String!]
        secondStopWork_not_in: [String!]
        secondStopWork_lt: String
        secondStopWork_lte: String
        secondStopWork_gt: String
        secondStopWork_gte: String
        secondStopWork_contains: String
        secondStopWork_not_contains: String
        secondStopWork_starts_with: String
        secondStopWork_not_starts_with: String
        secondStopWork_ends_with: String
        secondStopWork_not_ends_with: String
        AND: [DayOfEmployeeScalarWhereInput!]
        OR: [DayOfEmployeeScalarWhereInput!]
        NOT: [DayOfEmployeeScalarWhereInput!]
      }

      input DayOfEmployeeUpdateDataInput {
        number: Int
        weekday: Boolean
        weekend: Boolean
        holiday: Boolean
        beforeHoliday: Boolean
        firstStartWork: String
        firstStopWork: String
        secondStartWork: String
        secondStopWork: String
        kind: KindUpdateOneRequiredInput
      }

      input DayOfEmployeeUpdateManyDataInput {
        number: Int
        weekday: Boolean
        weekend: Boolean
        holiday: Boolean
        beforeHoliday: Boolean
        firstStartWork: String
        firstStopWork: String
        secondStartWork: String
        secondStopWork: String
      }

      input DayOfEmployeeUpdateManyInput {
        create: [DayOfEmployeeCreateInput!]
        update: [DayOfEmployeeUpdateWithWhereUniqueNestedInput!]
        upsert: [DayOfEmployeeUpsertWithWhereUniqueNestedInput!]
        delete: [DayOfEmployeeWhereUniqueInput!]
        deleteMany: [DayOfEmployeeScalarWhereInput!]
        updateMany: [DayOfEmployeeUpdateManyWithWhereNestedInput!]
      }

      input DayOfEmployeeUpdateManyWithWhereNestedInput {
        where: DayOfEmployeeScalarWhereInput!
        data: DayOfEmployeeUpdateManyDataInput!
      }

      input DayOfEmployeeUpdateWithWhereUniqueNestedInput {
        where: DayOfEmployeeWhereUniqueInput!
        data: DayOfEmployeeUpdateDataInput!
      }

      input DayOfEmployeeUpsertWithWhereUniqueNestedInput {
        where: DayOfEmployeeWhereUniqueInput!
        update: DayOfEmployeeUpdateDataInput!
        create: DayOfEmployeeCreateInput!
      }

      input DayOfEmployeeWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        number: Int
        number_not: Int
        number_in: [Int!]
        number_not_in: [Int!]
        number_lt: Int
        number_lte: Int
        number_gt: Int
        number_gte: Int
        weekday: Boolean
        weekday_not: Boolean
        weekend: Boolean
        weekend_not: Boolean
        holiday: Boolean
        holiday_not: Boolean
        beforeHoliday: Boolean
        beforeHoliday_not: Boolean
        firstStartWork: String
        firstStartWork_not: String
        firstStartWork_in: [String!]
        firstStartWork_not_in: [String!]
        firstStartWork_lt: String
        firstStartWork_lte: String
        firstStartWork_gt: String
        firstStartWork_gte: String
        firstStartWork_contains: String
        firstStartWork_not_contains: String
        firstStartWork_starts_with: String
        firstStartWork_not_starts_with: String
        firstStartWork_ends_with: String
        firstStartWork_not_ends_with: String
        firstStopWork: String
        firstStopWork_not: String
        firstStopWork_in: [String!]
        firstStopWork_not_in: [String!]
        firstStopWork_lt: String
        firstStopWork_lte: String
        firstStopWork_gt: String
        firstStopWork_gte: String
        firstStopWork_contains: String
        firstStopWork_not_contains: String
        firstStopWork_starts_with: String
        firstStopWork_not_starts_with: String
        firstStopWork_ends_with: String
        firstStopWork_not_ends_with: String
        secondStartWork: String
        secondStartWork_not: String
        secondStartWork_in: [String!]
        secondStartWork_not_in: [String!]
        secondStartWork_lt: String
        secondStartWork_lte: String
        secondStartWork_gt: String
        secondStartWork_gte: String
        secondStartWork_contains: String
        secondStartWork_not_contains: String
        secondStartWork_starts_with: String
        secondStartWork_not_starts_with: String
        secondStartWork_ends_with: String
        secondStartWork_not_ends_with: String
        secondStopWork: String
        secondStopWork_not: String
        secondStopWork_in: [String!]
        secondStopWork_not_in: [String!]
        secondStopWork_lt: String
        secondStopWork_lte: String
        secondStopWork_gt: String
        secondStopWork_gte: String
        secondStopWork_contains: String
        secondStopWork_not_contains: String
        secondStopWork_starts_with: String
        secondStopWork_not_starts_with: String
        secondStopWork_ends_with: String
        secondStopWork_not_ends_with: String
        kind: KindWhereInput
        AND: [DayOfEmployeeWhereInput!]
      }

      input DayOfEmployeeWhereUniqueInput {
        id: ID
      }

      input DayRestrictedWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        number: Int
        number_not: Int
        number_in: [Int!]
        number_not_in: [Int!]
        number_lt: Int
        number_lte: Int
        number_gt: Int
        number_gte: Int
        weekday: Boolean
        weekday_not: Boolean
        weekend: Boolean
        weekend_not: Boolean
        holiday: Boolean
        holiday_not: Boolean
        beforeHoliday: Boolean
        beforeHoliday_not: Boolean
        kindOfDay: KindOfDayRestrictedWhereInput
        AND: [DayRestrictedWhereInput!]
      }

      input DayScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        number: Int
        number_not: Int
        number_in: [Int!]
        number_not_in: [Int!]
        number_lt: Int
        number_lte: Int
        number_gt: Int
        number_gte: Int
        weekday: Boolean
        weekday_not: Boolean
        weekend: Boolean
        weekend_not: Boolean
        holiday: Boolean
        holiday_not: Boolean
        beforeHoliday: Boolean
        beforeHoliday_not: Boolean
        AND: [DayScalarWhereInput!]
        OR: [DayScalarWhereInput!]
        NOT: [DayScalarWhereInput!]
      }

      input DayUpdateDataInput {
        number: Int
        weekday: Boolean
        weekend: Boolean
        holiday: Boolean
        beforeHoliday: Boolean
        kindOfDay: KindOfDayUpdateOneInput
      }

      input DayUpdateManyDataInput {
        number: Int
        weekday: Boolean
        weekend: Boolean
        holiday: Boolean
        beforeHoliday: Boolean
      }

      input DayUpdateManyInput {
        create: [DayCreateInput!]
        update: [DayUpdateWithWhereUniqueNestedInput!]
        upsert: [DayUpsertWithWhereUniqueNestedInput!]
        delete: [DayWhereUniqueInput!]
        deleteMany: [DayScalarWhereInput!]
        updateMany: [DayUpdateManyWithWhereNestedInput!]
      }

      input DayUpdateManyWithWhereNestedInput {
        where: DayScalarWhereInput!
        data: DayUpdateManyDataInput!
      }

      input DayUpdateWithWhereUniqueNestedInput {
        where: DayWhereUniqueInput!
        data: DayUpdateDataInput!
      }

      input DayUpsertWithWhereUniqueNestedInput {
        where: DayWhereUniqueInput!
        update: DayUpdateDataInput!
        create: DayCreateInput!
      }

      input DayWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        number: Int
        number_not: Int
        number_in: [Int!]
        number_not_in: [Int!]
        number_lt: Int
        number_lte: Int
        number_gt: Int
        number_gte: Int
        weekday: Boolean
        weekday_not: Boolean
        weekend: Boolean
        weekend_not: Boolean
        holiday: Boolean
        holiday_not: Boolean
        beforeHoliday: Boolean
        beforeHoliday_not: Boolean
        kindOfDay: KindOfDayWhereInput
        AND: [DayWhereInput!]
      }

      input DayWhereUniqueInput {
        id: ID
      }

      type Employee {
        id: ID!
        fullname: String!
        rateOfWork: Float
        hoursOfMonth: String
        positionOfEmployee: PositionOfEmployee!
        daysOfEmployee: [DayOfEmployee!]
      }

      input EmployeeCreateInput {
        id: ID
        fullname: String!
        rateOfWork: Float
        hoursOfMonth: String
        positionOfEmployee: PositionOfEmployeeCreateOneInput!
        daysOfEmployee: DayOfEmployeeCreateManyInput
      }

      input EmployeeCreateManyInput {
        create: [EmployeeCreateInput!]
      }

      input EmployeeRestrictedWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        fullname: String
        fullname_not: String
        fullname_in: [String!]
        fullname_not_in: [String!]
        fullname_lt: String
        fullname_lte: String
        fullname_gt: String
        fullname_gte: String
        fullname_contains: String
        fullname_not_contains: String
        fullname_starts_with: String
        fullname_not_starts_with: String
        fullname_ends_with: String
        fullname_not_ends_with: String
        rateOfWork: Float
        rateOfWork_not: Float
        rateOfWork_in: [Float!]
        rateOfWork_not_in: [Float!]
        rateOfWork_lt: Float
        rateOfWork_lte: Float
        rateOfWork_gt: Float
        rateOfWork_gte: Float
        hoursOfMonth: String
        hoursOfMonth_not: String
        hoursOfMonth_in: [String!]
        hoursOfMonth_not_in: [String!]
        hoursOfMonth_lt: String
        hoursOfMonth_lte: String
        hoursOfMonth_gt: String
        hoursOfMonth_gte: String
        hoursOfMonth_contains: String
        hoursOfMonth_not_contains: String
        hoursOfMonth_starts_with: String
        hoursOfMonth_not_starts_with: String
        hoursOfMonth_ends_with: String
        hoursOfMonth_not_ends_with: String
        positionOfEmployee: PositionOfEmployeeRestrictedWhereInput
        daysOfEmployee_every: DayOfEmployeeRestrictedWhereInput
        daysOfEmployee_some: DayOfEmployeeRestrictedWhereInput
        daysOfEmployee_none: DayOfEmployeeRestrictedWhereInput
        AND: [EmployeeRestrictedWhereInput!]
      }

      input EmployeeScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        fullname: String
        fullname_not: String
        fullname_in: [String!]
        fullname_not_in: [String!]
        fullname_lt: String
        fullname_lte: String
        fullname_gt: String
        fullname_gte: String
        fullname_contains: String
        fullname_not_contains: String
        fullname_starts_with: String
        fullname_not_starts_with: String
        fullname_ends_with: String
        fullname_not_ends_with: String
        rateOfWork: Float
        rateOfWork_not: Float
        rateOfWork_in: [Float!]
        rateOfWork_not_in: [Float!]
        rateOfWork_lt: Float
        rateOfWork_lte: Float
        rateOfWork_gt: Float
        rateOfWork_gte: Float
        hoursOfMonth: String
        hoursOfMonth_not: String
        hoursOfMonth_in: [String!]
        hoursOfMonth_not_in: [String!]
        hoursOfMonth_lt: String
        hoursOfMonth_lte: String
        hoursOfMonth_gt: String
        hoursOfMonth_gte: String
        hoursOfMonth_contains: String
        hoursOfMonth_not_contains: String
        hoursOfMonth_starts_with: String
        hoursOfMonth_not_starts_with: String
        hoursOfMonth_ends_with: String
        hoursOfMonth_not_ends_with: String
        AND: [EmployeeScalarWhereInput!]
        OR: [EmployeeScalarWhereInput!]
        NOT: [EmployeeScalarWhereInput!]
      }

      input EmployeeUpdateDataInput {
        fullname: String
        rateOfWork: Float
        hoursOfMonth: String
        positionOfEmployee: PositionOfEmployeeUpdateOneRequiredInput
        daysOfEmployee: DayOfEmployeeUpdateManyInput
      }

      input EmployeeUpdateManyDataInput {
        fullname: String
        rateOfWork: Float
        hoursOfMonth: String
      }

      input EmployeeUpdateManyInput {
        create: [EmployeeCreateInput!]
        update: [EmployeeUpdateWithWhereUniqueNestedInput!]
        upsert: [EmployeeUpsertWithWhereUniqueNestedInput!]
        delete: [EmployeeWhereUniqueInput!]
        deleteMany: [EmployeeScalarWhereInput!]
        updateMany: [EmployeeUpdateManyWithWhereNestedInput!]
      }

      input EmployeeUpdateManyWithWhereNestedInput {
        where: EmployeeScalarWhereInput!
        data: EmployeeUpdateManyDataInput!
      }

      input EmployeeUpdateWithWhereUniqueNestedInput {
        where: EmployeeWhereUniqueInput!
        data: EmployeeUpdateDataInput!
      }

      input EmployeeUpsertWithWhereUniqueNestedInput {
        where: EmployeeWhereUniqueInput!
        update: EmployeeUpdateDataInput!
        create: EmployeeCreateInput!
      }

      input EmployeeWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        fullname: String
        fullname_not: String
        fullname_in: [String!]
        fullname_not_in: [String!]
        fullname_lt: String
        fullname_lte: String
        fullname_gt: String
        fullname_gte: String
        fullname_contains: String
        fullname_not_contains: String
        fullname_starts_with: String
        fullname_not_starts_with: String
        fullname_ends_with: String
        fullname_not_ends_with: String
        rateOfWork: Float
        rateOfWork_not: Float
        rateOfWork_in: [Float!]
        rateOfWork_not_in: [Float!]
        rateOfWork_lt: Float
        rateOfWork_lte: Float
        rateOfWork_gt: Float
        rateOfWork_gte: Float
        hoursOfMonth: String
        hoursOfMonth_not: String
        hoursOfMonth_in: [String!]
        hoursOfMonth_not_in: [String!]
        hoursOfMonth_lt: String
        hoursOfMonth_lte: String
        hoursOfMonth_gt: String
        hoursOfMonth_gte: String
        hoursOfMonth_contains: String
        hoursOfMonth_not_contains: String
        hoursOfMonth_starts_with: String
        hoursOfMonth_not_starts_with: String
        hoursOfMonth_ends_with: String
        hoursOfMonth_not_ends_with: String
        positionOfEmployee: PositionOfEmployeeWhereInput
        daysOfEmployee_some: DayOfEmployeeWhereInput
        daysOfEmployee_every: DayOfEmployeeRestrictedWhereInput
        daysOfEmployee_none: DayOfEmployeeRestrictedWhereInput
        AND: [EmployeeWhereInput!]
      }

      input EmployeeWhereUniqueInput {
        id: ID
      }

      type Holiday {
        num: Int!
        id: String!
        isChecked: Boolean!
      }

      input HolidayCreateInput {
        num: Int!
        id: String!
        isChecked: Boolean!
      }

      input HolidayCreateManyInput {
        create: [HolidayCreateInput!]
      }

      input HolidayRestrictedWhereInput {
        num: Int
        num_not: Int
        num_in: [Int!]
        num_not_in: [Int!]
        num_lt: Int
        num_lte: Int
        num_gt: Int
        num_gte: Int
        id: String
        id_not: String
        id_in: [String!]
        id_not_in: [String!]
        id_lt: String
        id_lte: String
        id_gt: String
        id_gte: String
        id_contains: String
        id_not_contains: String
        id_starts_with: String
        id_not_starts_with: String
        id_ends_with: String
        id_not_ends_with: String
        isChecked: Boolean
        isChecked_not: Boolean
        AND: [HolidayRestrictedWhereInput!]
      }

      input HolidayScalarWhereInput {
        num: Int
        num_not: Int
        num_in: [Int!]
        num_not_in: [Int!]
        num_lt: Int
        num_lte: Int
        num_gt: Int
        num_gte: Int
        id: String
        id_not: String
        id_in: [String!]
        id_not_in: [String!]
        id_lt: String
        id_lte: String
        id_gt: String
        id_gte: String
        id_contains: String
        id_not_contains: String
        id_starts_with: String
        id_not_starts_with: String
        id_ends_with: String
        id_not_ends_with: String
        isChecked: Boolean
        isChecked_not: Boolean
        AND: [HolidayScalarWhereInput!]
        OR: [HolidayScalarWhereInput!]
        NOT: [HolidayScalarWhereInput!]
      }

      input HolidayUpdateManyDataInput {
        num: Int
        id: String
        isChecked: Boolean
      }

      input HolidayUpdateManyInput {
        create: [HolidayCreateInput!]
        deleteMany: [HolidayScalarWhereInput!]
        updateMany: [HolidayUpdateManyWithWhereNestedInput!]
      }

      input HolidayUpdateManyWithWhereNestedInput {
        where: HolidayScalarWhereInput!
        data: HolidayUpdateManyDataInput!
      }

      input HolidayWhereInput {
        num: Int
        num_not: Int
        num_in: [Int!]
        num_not_in: [Int!]
        num_lt: Int
        num_lte: Int
        num_gt: Int
        num_gte: Int
        id: String
        id_not: String
        id_in: [String!]
        id_not_in: [String!]
        id_lt: String
        id_lte: String
        id_gt: String
        id_gte: String
        id_contains: String
        id_not_contains: String
        id_starts_with: String
        id_not_starts_with: String
        id_ends_with: String
        id_not_ends_with: String
        isChecked: Boolean
        isChecked_not: Boolean
        AND: [HolidayWhereInput!]
      }

      type Kind {
        businessTrip: Boolean
        study: Boolean
        studyAdd: Boolean
        unknown: Boolean
        absenteeism: Boolean
        goverment: Boolean
        holiday: Boolean
        disease: Boolean
        vacation: Boolean
        childCare: Boolean
        admVacation: Boolean
        overTime: Boolean
        nightTime: Boolean
        working: Boolean
      }

      input KindCreateInput {
        businessTrip: Boolean
        study: Boolean
        studyAdd: Boolean
        unknown: Boolean
        absenteeism: Boolean
        goverment: Boolean
        holiday: Boolean
        disease: Boolean
        vacation: Boolean
        childCare: Boolean
        admVacation: Boolean
        overTime: Boolean
        nightTime: Boolean
        working: Boolean
      }

      input KindCreateOneInput {
        create: KindCreateInput
      }

      type KindOfDay {
        businessTrip: Boolean
        study: Boolean
        studyAdd: Boolean
        unknown: Boolean
        absenteeism: Boolean
        goverment: Boolean
        holiday: Boolean
        disease: Boolean
        vacation: Boolean
        childCare: Boolean
        admVacation: Boolean
        overTime: Boolean
        nightTime: Boolean
        working: Boolean
      }

      input KindOfDayCreateInput {
        businessTrip: Boolean
        study: Boolean
        studyAdd: Boolean
        unknown: Boolean
        absenteeism: Boolean
        goverment: Boolean
        holiday: Boolean
        disease: Boolean
        vacation: Boolean
        childCare: Boolean
        admVacation: Boolean
        overTime: Boolean
        nightTime: Boolean
        working: Boolean
      }

      input KindOfDayCreateOneInput {
        create: KindOfDayCreateInput
      }

      input KindOfDayRestrictedWhereInput {
        businessTrip: Boolean
        businessTrip_not: Boolean
        study: Boolean
        study_not: Boolean
        studyAdd: Boolean
        studyAdd_not: Boolean
        unknown: Boolean
        unknown_not: Boolean
        absenteeism: Boolean
        absenteeism_not: Boolean
        goverment: Boolean
        goverment_not: Boolean
        holiday: Boolean
        holiday_not: Boolean
        disease: Boolean
        disease_not: Boolean
        vacation: Boolean
        vacation_not: Boolean
        childCare: Boolean
        childCare_not: Boolean
        admVacation: Boolean
        admVacation_not: Boolean
        overTime: Boolean
        overTime_not: Boolean
        nightTime: Boolean
        nightTime_not: Boolean
        working: Boolean
        working_not: Boolean
        AND: [KindOfDayRestrictedWhereInput!]
      }

      input KindOfDayUpdateDataInput {
        businessTrip: Boolean
        study: Boolean
        studyAdd: Boolean
        unknown: Boolean
        absenteeism: Boolean
        goverment: Boolean
        holiday: Boolean
        disease: Boolean
        vacation: Boolean
        childCare: Boolean
        admVacation: Boolean
        overTime: Boolean
        nightTime: Boolean
        working: Boolean
      }

      input KindOfDayUpdateOneInput {
        create: KindOfDayCreateInput
        update: KindOfDayUpdateDataInput
        upsert: KindOfDayUpsertNestedInput
        delete: Boolean
        disconnect: Boolean
      }

      input KindOfDayUpsertNestedInput {
        update: KindOfDayUpdateDataInput!
        create: KindOfDayCreateInput!
      }

      input KindOfDayWhereInput {
        businessTrip: Boolean
        businessTrip_not: Boolean
        study: Boolean
        study_not: Boolean
        studyAdd: Boolean
        studyAdd_not: Boolean
        unknown: Boolean
        unknown_not: Boolean
        absenteeism: Boolean
        absenteeism_not: Boolean
        goverment: Boolean
        goverment_not: Boolean
        holiday: Boolean
        holiday_not: Boolean
        disease: Boolean
        disease_not: Boolean
        vacation: Boolean
        vacation_not: Boolean
        childCare: Boolean
        childCare_not: Boolean
        admVacation: Boolean
        admVacation_not: Boolean
        overTime: Boolean
        overTime_not: Boolean
        nightTime: Boolean
        nightTime_not: Boolean
        working: Boolean
        working_not: Boolean
        AND: [KindOfDayWhereInput!]
      }

      input KindRestrictedWhereInput {
        businessTrip: Boolean
        businessTrip_not: Boolean
        study: Boolean
        study_not: Boolean
        studyAdd: Boolean
        studyAdd_not: Boolean
        unknown: Boolean
        unknown_not: Boolean
        absenteeism: Boolean
        absenteeism_not: Boolean
        goverment: Boolean
        goverment_not: Boolean
        holiday: Boolean
        holiday_not: Boolean
        disease: Boolean
        disease_not: Boolean
        vacation: Boolean
        vacation_not: Boolean
        childCare: Boolean
        childCare_not: Boolean
        admVacation: Boolean
        admVacation_not: Boolean
        overTime: Boolean
        overTime_not: Boolean
        nightTime: Boolean
        nightTime_not: Boolean
        working: Boolean
        working_not: Boolean
        AND: [KindRestrictedWhereInput!]
      }

      input KindUpdateDataInput {
        businessTrip: Boolean
        study: Boolean
        studyAdd: Boolean
        unknown: Boolean
        absenteeism: Boolean
        goverment: Boolean
        holiday: Boolean
        disease: Boolean
        vacation: Boolean
        childCare: Boolean
        admVacation: Boolean
        overTime: Boolean
        nightTime: Boolean
        working: Boolean
      }

      input KindUpdateOneRequiredInput {
        create: KindCreateInput
        update: KindUpdateDataInput
        upsert: KindUpsertNestedInput
      }

      input KindUpsertNestedInput {
        update: KindUpdateDataInput!
        create: KindCreateInput!
      }

      input KindWhereInput {
        businessTrip: Boolean
        businessTrip_not: Boolean
        study: Boolean
        study_not: Boolean
        studyAdd: Boolean
        studyAdd_not: Boolean
        unknown: Boolean
        unknown_not: Boolean
        absenteeism: Boolean
        absenteeism_not: Boolean
        goverment: Boolean
        goverment_not: Boolean
        holiday: Boolean
        holiday_not: Boolean
        disease: Boolean
        disease_not: Boolean
        vacation: Boolean
        vacation_not: Boolean
        childCare: Boolean
        childCare_not: Boolean
        admVacation: Boolean
        admVacation_not: Boolean
        overTime: Boolean
        overTime_not: Boolean
        nightTime: Boolean
        nightTime_not: Boolean
        working: Boolean
        working_not: Boolean
        AND: [KindWhereInput!]
      }

      scalar Long

      type LunchTime {
        startLunch: String!
        endLunch: String!
      }

      input LunchTimeCreateInput {
        startLunch: String!
        endLunch: String!
      }

      input LunchTimeCreateOneInput {
        create: LunchTimeCreateInput
      }

      type LunchTimeE {
        startLunch: String!
        endLunch: String!
      }

      input LunchTimeECreateInput {
        startLunch: String!
        endLunch: String!
      }

      input LunchTimeECreateOneInput {
        create: LunchTimeECreateInput
      }

      input LunchTimeERestrictedWhereInput {
        startLunch: String
        startLunch_not: String
        startLunch_in: [String!]
        startLunch_not_in: [String!]
        startLunch_lt: String
        startLunch_lte: String
        startLunch_gt: String
        startLunch_gte: String
        startLunch_contains: String
        startLunch_not_contains: String
        startLunch_starts_with: String
        startLunch_not_starts_with: String
        startLunch_ends_with: String
        startLunch_not_ends_with: String
        endLunch: String
        endLunch_not: String
        endLunch_in: [String!]
        endLunch_not_in: [String!]
        endLunch_lt: String
        endLunch_lte: String
        endLunch_gt: String
        endLunch_gte: String
        endLunch_contains: String
        endLunch_not_contains: String
        endLunch_starts_with: String
        endLunch_not_starts_with: String
        endLunch_ends_with: String
        endLunch_not_ends_with: String
        AND: [LunchTimeERestrictedWhereInput!]
      }

      input LunchTimeEUpdateDataInput {
        startLunch: String
        endLunch: String
      }

      input LunchTimeEUpdateOneInput {
        create: LunchTimeECreateInput
        update: LunchTimeEUpdateDataInput
        upsert: LunchTimeEUpsertNestedInput
        delete: Boolean
        disconnect: Boolean
      }

      input LunchTimeEUpsertNestedInput {
        update: LunchTimeEUpdateDataInput!
        create: LunchTimeECreateInput!
      }

      input LunchTimeEWhereInput {
        startLunch: String
        startLunch_not: String
        startLunch_in: [String!]
        startLunch_not_in: [String!]
        startLunch_lt: String
        startLunch_lte: String
        startLunch_gt: String
        startLunch_gte: String
        startLunch_contains: String
        startLunch_not_contains: String
        startLunch_starts_with: String
        startLunch_not_starts_with: String
        startLunch_ends_with: String
        startLunch_not_ends_with: String
        endLunch: String
        endLunch_not: String
        endLunch_in: [String!]
        endLunch_not_in: [String!]
        endLunch_lt: String
        endLunch_lte: String
        endLunch_gt: String
        endLunch_gte: String
        endLunch_contains: String
        endLunch_not_contains: String
        endLunch_starts_with: String
        endLunch_not_starts_with: String
        endLunch_ends_with: String
        endLunch_not_ends_with: String
        AND: [LunchTimeEWhereInput!]
      }

      input LunchTimeUpdateDataInput {
        startLunch: String
        endLunch: String
      }

      input LunchTimeUpdateOneInput {
        create: LunchTimeCreateInput
        update: LunchTimeUpdateDataInput
        upsert: LunchTimeUpsertNestedInput
        delete: Boolean
        disconnect: Boolean
      }

      input LunchTimeUpsertNestedInput {
        update: LunchTimeUpdateDataInput!
        create: LunchTimeCreateInput!
      }

      input LunchTimeWhereInput {
        startLunch: String
        startLunch_not: String
        startLunch_in: [String!]
        startLunch_not_in: [String!]
        startLunch_lt: String
        startLunch_lte: String
        startLunch_gt: String
        startLunch_gte: String
        startLunch_contains: String
        startLunch_not_contains: String
        startLunch_starts_with: String
        startLunch_not_starts_with: String
        startLunch_ends_with: String
        startLunch_not_ends_with: String
        endLunch: String
        endLunch_not: String
        endLunch_in: [String!]
        endLunch_not_in: [String!]
        endLunch_lt: String
        endLunch_lte: String
        endLunch_gt: String
        endLunch_gte: String
        endLunch_contains: String
        endLunch_not_contains: String
        endLunch_starts_with: String
        endLunch_not_starts_with: String
        endLunch_ends_with: String
        endLunch_not_ends_with: String
        AND: [LunchTimeWhereInput!]
      }

      type Month {
        id: ID!
        days: [Day!]
        nameOfMonth: String!
        daysAmount: Int!
        weekdays: [Weekday!]
        weekends: [Weekend!]
        holidays: [Holiday!]
        beforeHolidays: [BeforeHoliday!]
      }

      input MonthCreateInput {
        id: ID
        days: DayCreateManyInput
        nameOfMonth: String!
        daysAmount: Int!
        weekdays: WeekdayCreateManyInput
        weekends: WeekendCreateManyInput
        holidays: HolidayCreateManyInput
        beforeHolidays: BeforeHolidayCreateManyInput
      }

      input MonthCreateOneInput {
        create: MonthCreateInput
      }

      input MonthUpdateDataInput {
        days: DayUpdateManyInput
        nameOfMonth: String
        daysAmount: Int
        weekdays: WeekdayUpdateManyInput
        weekends: WeekendUpdateManyInput
        holidays: HolidayUpdateManyInput
        beforeHolidays: BeforeHolidayUpdateManyInput
      }

      input MonthUpdateOneRequiredInput {
        create: MonthCreateInput
        update: MonthUpdateDataInput
        upsert: MonthUpsertNestedInput
        connect: MonthWhereUniqueInput
      }

      input MonthUpsertNestedInput {
        update: MonthUpdateDataInput!
        create: MonthCreateInput!
      }

      input MonthWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        days_some: DayWhereInput
        days_every: DayRestrictedWhereInput
        days_none: DayRestrictedWhereInput
        nameOfMonth: String
        nameOfMonth_not: String
        nameOfMonth_in: [String!]
        nameOfMonth_not_in: [String!]
        nameOfMonth_lt: String
        nameOfMonth_lte: String
        nameOfMonth_gt: String
        nameOfMonth_gte: String
        nameOfMonth_contains: String
        nameOfMonth_not_contains: String
        nameOfMonth_starts_with: String
        nameOfMonth_not_starts_with: String
        nameOfMonth_ends_with: String
        nameOfMonth_not_ends_with: String
        daysAmount: Int
        daysAmount_not: Int
        daysAmount_in: [Int!]
        daysAmount_not_in: [Int!]
        daysAmount_lt: Int
        daysAmount_lte: Int
        daysAmount_gt: Int
        daysAmount_gte: Int
        weekdays_some: WeekdayWhereInput
        weekdays_every: WeekdayRestrictedWhereInput
        weekdays_none: WeekdayRestrictedWhereInput
        weekends_some: WeekendWhereInput
        weekends_every: WeekendRestrictedWhereInput
        weekends_none: WeekendRestrictedWhereInput
        holidays_some: HolidayWhereInput
        holidays_every: HolidayRestrictedWhereInput
        holidays_none: HolidayRestrictedWhereInput
        beforeHolidays_some: BeforeHolidayWhereInput
        beforeHolidays_every: BeforeHolidayRestrictedWhereInput
        beforeHolidays_none: BeforeHolidayRestrictedWhereInput
        AND: [MonthWhereInput!]
      }

      input MonthWhereUniqueInput {
        id: ID
      }

      type Mutation {
        createAdmin(data: AdminCreateInput!): Admin!
        updateAdmin(
          data: AdminUpdateInput!
          where: AdminWhereUniqueInput!
        ): Admin
        updateManyAdmins(
          data: AdminUpdateManyMutationInput!
          where: AdminWhereInput
        ): BatchPayload!
        upsertAdmin(
          where: AdminWhereUniqueInput!
          create: AdminCreateInput!
          update: AdminUpdateInput!
        ): Admin!
        deleteAdmin(where: AdminWhereUniqueInput!): Admin
        deleteManyAdmins(where: AdminWhereInput): BatchPayload!
        createSchedule(data: ScheduleCreateInput!): Schedule!
        updateSchedule(
          data: ScheduleUpdateInput!
          where: ScheduleWhereUniqueInput!
        ): Schedule
        updateManySchedules(
          data: ScheduleUpdateManyMutationInput!
          where: ScheduleWhereInput
        ): BatchPayload!
        upsertSchedule(
          where: ScheduleWhereUniqueInput!
          create: ScheduleCreateInput!
          update: ScheduleUpdateInput!
        ): Schedule!
        deleteSchedule(where: ScheduleWhereUniqueInput!): Schedule
        deleteManySchedules(where: ScheduleWhereInput): BatchPayload!
        createUser(data: UserCreateInput!): User!
        updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
        updateManyUsers(
          data: UserUpdateManyMutationInput!
          where: UserWhereInput
        ): BatchPayload!
        upsertUser(
          where: UserWhereUniqueInput!
          create: UserCreateInput!
          update: UserUpdateInput!
        ): User!
        deleteUser(where: UserWhereUniqueInput!): User
        deleteManyUsers(where: UserWhereInput): BatchPayload!
      }

      enum MutationType {
        CREATED
        UPDATED
        DELETED
      }

      interface Node {
        id: ID!
      }

      type PageInfo {
        hasNextPage: Boolean!
        hasPreviousPage: Boolean!
        startCursor: String
        endCursor: String
      }

      type Position {
        namePosition: String!
        hoursOfWork: WorkTime!
        secondHoursOfWork: SecondWorkTime
        lunch: LunchTime
        secondLunch: SecondLunchTime
        fulltime: Boolean!
        longOfDay: String!
        hoursOfMonth: String
      }

      input PositionCreateInput {
        namePosition: String!
        hoursOfWork: WorkTimeCreateOneInput!
        secondHoursOfWork: SecondWorkTimeCreateOneInput
        lunch: LunchTimeCreateOneInput
        secondLunch: SecondLunchTimeCreateOneInput
        fulltime: Boolean
        longOfDay: String!
        hoursOfMonth: String
      }

      input PositionCreateOneInput {
        create: PositionCreateInput
      }

      type PositionOfEmployee {
        namePosition: String!
        hoursOfWork: WorkTimeE!
        secondHoursOfWork: SecondWorkTimeE
        lunch: LunchTimeE
        secondLunch: SecondLunchTimeE
        fulltime: Boolean!
        longOfDay: String!
      }

      input PositionOfEmployeeCreateInput {
        namePosition: String!
        hoursOfWork: WorkTimeECreateOneInput!
        secondHoursOfWork: SecondWorkTimeECreateOneInput
        lunch: LunchTimeECreateOneInput
        secondLunch: SecondLunchTimeECreateOneInput
        fulltime: Boolean
        longOfDay: String!
      }

      input PositionOfEmployeeCreateOneInput {
        create: PositionOfEmployeeCreateInput
      }

      input PositionOfEmployeeRestrictedWhereInput {
        namePosition: String
        namePosition_not: String
        namePosition_in: [String!]
        namePosition_not_in: [String!]
        namePosition_lt: String
        namePosition_lte: String
        namePosition_gt: String
        namePosition_gte: String
        namePosition_contains: String
        namePosition_not_contains: String
        namePosition_starts_with: String
        namePosition_not_starts_with: String
        namePosition_ends_with: String
        namePosition_not_ends_with: String
        hoursOfWork: WorkTimeERestrictedWhereInput
        secondHoursOfWork: SecondWorkTimeERestrictedWhereInput
        lunch: LunchTimeERestrictedWhereInput
        secondLunch: SecondLunchTimeERestrictedWhereInput
        fulltime: Boolean
        fulltime_not: Boolean
        longOfDay: String
        longOfDay_not: String
        longOfDay_in: [String!]
        longOfDay_not_in: [String!]
        longOfDay_lt: String
        longOfDay_lte: String
        longOfDay_gt: String
        longOfDay_gte: String
        longOfDay_contains: String
        longOfDay_not_contains: String
        longOfDay_starts_with: String
        longOfDay_not_starts_with: String
        longOfDay_ends_with: String
        longOfDay_not_ends_with: String
        AND: [PositionOfEmployeeRestrictedWhereInput!]
      }

      input PositionOfEmployeeUpdateDataInput {
        namePosition: String
        hoursOfWork: WorkTimeEUpdateOneRequiredInput
        secondHoursOfWork: SecondWorkTimeEUpdateOneInput
        lunch: LunchTimeEUpdateOneInput
        secondLunch: SecondLunchTimeEUpdateOneInput
        fulltime: Boolean
        longOfDay: String
      }

      input PositionOfEmployeeUpdateOneRequiredInput {
        create: PositionOfEmployeeCreateInput
        update: PositionOfEmployeeUpdateDataInput
        upsert: PositionOfEmployeeUpsertNestedInput
      }

      input PositionOfEmployeeUpsertNestedInput {
        update: PositionOfEmployeeUpdateDataInput!
        create: PositionOfEmployeeCreateInput!
      }

      input PositionOfEmployeeWhereInput {
        namePosition: String
        namePosition_not: String
        namePosition_in: [String!]
        namePosition_not_in: [String!]
        namePosition_lt: String
        namePosition_lte: String
        namePosition_gt: String
        namePosition_gte: String
        namePosition_contains: String
        namePosition_not_contains: String
        namePosition_starts_with: String
        namePosition_not_starts_with: String
        namePosition_ends_with: String
        namePosition_not_ends_with: String
        hoursOfWork: WorkTimeEWhereInput
        secondHoursOfWork: SecondWorkTimeEWhereInput
        lunch: LunchTimeEWhereInput
        secondLunch: SecondLunchTimeEWhereInput
        fulltime: Boolean
        fulltime_not: Boolean
        longOfDay: String
        longOfDay_not: String
        longOfDay_in: [String!]
        longOfDay_not_in: [String!]
        longOfDay_lt: String
        longOfDay_lte: String
        longOfDay_gt: String
        longOfDay_gte: String
        longOfDay_contains: String
        longOfDay_not_contains: String
        longOfDay_starts_with: String
        longOfDay_not_starts_with: String
        longOfDay_ends_with: String
        longOfDay_not_ends_with: String
        AND: [PositionOfEmployeeWhereInput!]
      }

      input PositionUpdateDataInput {
        namePosition: String
        hoursOfWork: WorkTimeUpdateOneRequiredInput
        secondHoursOfWork: SecondWorkTimeUpdateOneInput
        lunch: LunchTimeUpdateOneInput
        secondLunch: SecondLunchTimeUpdateOneInput
        fulltime: Boolean
        longOfDay: String
        hoursOfMonth: String
      }

      input PositionUpdateOneRequiredInput {
        create: PositionCreateInput
        update: PositionUpdateDataInput
        upsert: PositionUpsertNestedInput
      }

      input PositionUpsertNestedInput {
        update: PositionUpdateDataInput!
        create: PositionCreateInput!
      }

      input PositionWhereInput {
        namePosition: String
        namePosition_not: String
        namePosition_in: [String!]
        namePosition_not_in: [String!]
        namePosition_lt: String
        namePosition_lte: String
        namePosition_gt: String
        namePosition_gte: String
        namePosition_contains: String
        namePosition_not_contains: String
        namePosition_starts_with: String
        namePosition_not_starts_with: String
        namePosition_ends_with: String
        namePosition_not_ends_with: String
        hoursOfWork: WorkTimeWhereInput
        secondHoursOfWork: SecondWorkTimeWhereInput
        lunch: LunchTimeWhereInput
        secondLunch: SecondLunchTimeWhereInput
        fulltime: Boolean
        fulltime_not: Boolean
        longOfDay: String
        longOfDay_not: String
        longOfDay_in: [String!]
        longOfDay_not_in: [String!]
        longOfDay_lt: String
        longOfDay_lte: String
        longOfDay_gt: String
        longOfDay_gte: String
        longOfDay_contains: String
        longOfDay_not_contains: String
        longOfDay_starts_with: String
        longOfDay_not_starts_with: String
        longOfDay_ends_with: String
        longOfDay_not_ends_with: String
        hoursOfMonth: String
        hoursOfMonth_not: String
        hoursOfMonth_in: [String!]
        hoursOfMonth_not_in: [String!]
        hoursOfMonth_lt: String
        hoursOfMonth_lte: String
        hoursOfMonth_gt: String
        hoursOfMonth_gte: String
        hoursOfMonth_contains: String
        hoursOfMonth_not_contains: String
        hoursOfMonth_starts_with: String
        hoursOfMonth_not_starts_with: String
        hoursOfMonth_ends_with: String
        hoursOfMonth_not_ends_with: String
        AND: [PositionWhereInput!]
      }

      type Query {
        admin(where: AdminWhereUniqueInput!): Admin
        admins(
          where: AdminWhereInput
          orderBy: AdminOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Admin]!
        adminsConnection(
          where: AdminWhereInput
          orderBy: AdminOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): AdminConnection!
        schedule(where: ScheduleWhereUniqueInput!): Schedule
        schedules(
          where: ScheduleWhereInput
          orderBy: ScheduleOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Schedule]!
        schedulesConnection(
          where: ScheduleWhereInput
          orderBy: ScheduleOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): ScheduleConnection!
        user(where: UserWhereUniqueInput!): User
        users(
          where: UserWhereInput
          orderBy: UserOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [User]!
        usersConnection(
          where: UserWhereInput
          orderBy: UserOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): UserConnection!
        node(id: ID!): Node
      }

      type Schedule {
        id: ID!
        nameSchedule: String!
        owner: Admin!
        year: Int!
        month: Month!
        amountOfWorkingHours: Float
        typeOfWeek: Float!
        theader: String
        employees: [Employee!]
      }

      type ScheduleConnection {
        pageInfo: PageInfo!
        edges: [ScheduleEdge]!
        aggregate: AggregateSchedule!
      }

      input ScheduleCreateInput {
        id: ID
        nameSchedule: String!
        owner: AdminCreateOneWithoutSchedulesInput!
        year: Int!
        month: MonthCreateOneInput!
        amountOfWorkingHours: Float
        typeOfWeek: Float!
        theader: String
        employees: EmployeeCreateManyInput
      }

      input ScheduleCreateManyWithoutOwnerInput {
        create: [ScheduleCreateWithoutOwnerInput!]
        connect: [ScheduleWhereUniqueInput!]
      }

      input ScheduleCreateWithoutOwnerInput {
        id: ID
        nameSchedule: String!
        year: Int!
        month: MonthCreateOneInput!
        amountOfWorkingHours: Float
        typeOfWeek: Float!
        theader: String
        employees: EmployeeCreateManyInput
      }

      type ScheduleEdge {
        node: Schedule!
        cursor: String!
      }

      enum ScheduleOrderByInput {
        id_ASC
        id_DESC
        nameSchedule_ASC
        nameSchedule_DESC
        year_ASC
        year_DESC
        amountOfWorkingHours_ASC
        amountOfWorkingHours_DESC
        typeOfWeek_ASC
        typeOfWeek_DESC
        theader_ASC
        theader_DESC
      }

      type SchedulePreviousValues {
        id: ID!
        nameSchedule: String!
        year: Int!
        amountOfWorkingHours: Float
        typeOfWeek: Float!
        theader: String
      }

      input ScheduleScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        nameSchedule: String
        nameSchedule_not: String
        nameSchedule_in: [String!]
        nameSchedule_not_in: [String!]
        nameSchedule_lt: String
        nameSchedule_lte: String
        nameSchedule_gt: String
        nameSchedule_gte: String
        nameSchedule_contains: String
        nameSchedule_not_contains: String
        nameSchedule_starts_with: String
        nameSchedule_not_starts_with: String
        nameSchedule_ends_with: String
        nameSchedule_not_ends_with: String
        year: Int
        year_not: Int
        year_in: [Int!]
        year_not_in: [Int!]
        year_lt: Int
        year_lte: Int
        year_gt: Int
        year_gte: Int
        amountOfWorkingHours: Float
        amountOfWorkingHours_not: Float
        amountOfWorkingHours_in: [Float!]
        amountOfWorkingHours_not_in: [Float!]
        amountOfWorkingHours_lt: Float
        amountOfWorkingHours_lte: Float
        amountOfWorkingHours_gt: Float
        amountOfWorkingHours_gte: Float
        typeOfWeek: Float
        typeOfWeek_not: Float
        typeOfWeek_in: [Float!]
        typeOfWeek_not_in: [Float!]
        typeOfWeek_lt: Float
        typeOfWeek_lte: Float
        typeOfWeek_gt: Float
        typeOfWeek_gte: Float
        theader: String
        theader_not: String
        theader_in: [String!]
        theader_not_in: [String!]
        theader_lt: String
        theader_lte: String
        theader_gt: String
        theader_gte: String
        theader_contains: String
        theader_not_contains: String
        theader_starts_with: String
        theader_not_starts_with: String
        theader_ends_with: String
        theader_not_ends_with: String
        AND: [ScheduleScalarWhereInput!]
        OR: [ScheduleScalarWhereInput!]
        NOT: [ScheduleScalarWhereInput!]
      }

      type ScheduleSubscriptionPayload {
        mutation: MutationType!
        node: Schedule
        updatedFields: [String!]
        previousValues: SchedulePreviousValues
      }

      input ScheduleSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: ScheduleWhereInput
        AND: [ScheduleSubscriptionWhereInput!]
      }

      input ScheduleUpdateInput {
        nameSchedule: String
        owner: AdminUpdateOneRequiredWithoutSchedulesInput
        year: Int
        month: MonthUpdateOneRequiredInput
        amountOfWorkingHours: Float
        typeOfWeek: Float
        theader: String
        employees: EmployeeUpdateManyInput
      }

      input ScheduleUpdateManyDataInput {
        nameSchedule: String
        year: Int
        amountOfWorkingHours: Float
        typeOfWeek: Float
        theader: String
      }

      input ScheduleUpdateManyMutationInput {
        nameSchedule: String
        year: Int
        amountOfWorkingHours: Float
        typeOfWeek: Float
        theader: String
      }

      input ScheduleUpdateManyWithoutOwnerInput {
        create: [ScheduleCreateWithoutOwnerInput!]
        delete: [ScheduleWhereUniqueInput!]
        connect: [ScheduleWhereUniqueInput!]
        set: [ScheduleWhereUniqueInput!]
        disconnect: [ScheduleWhereUniqueInput!]
        update: [ScheduleUpdateWithWhereUniqueWithoutOwnerInput!]
        upsert: [ScheduleUpsertWithWhereUniqueWithoutOwnerInput!]
        deleteMany: [ScheduleScalarWhereInput!]
        updateMany: [ScheduleUpdateManyWithWhereNestedInput!]
      }

      input ScheduleUpdateManyWithWhereNestedInput {
        where: ScheduleScalarWhereInput!
        data: ScheduleUpdateManyDataInput!
      }

      input ScheduleUpdateWithoutOwnerDataInput {
        nameSchedule: String
        year: Int
        month: MonthUpdateOneRequiredInput
        amountOfWorkingHours: Float
        typeOfWeek: Float
        theader: String
        employees: EmployeeUpdateManyInput
      }

      input ScheduleUpdateWithWhereUniqueWithoutOwnerInput {
        where: ScheduleWhereUniqueInput!
        data: ScheduleUpdateWithoutOwnerDataInput!
      }

      input ScheduleUpsertWithWhereUniqueWithoutOwnerInput {
        where: ScheduleWhereUniqueInput!
        update: ScheduleUpdateWithoutOwnerDataInput!
        create: ScheduleCreateWithoutOwnerInput!
      }

      input ScheduleWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        nameSchedule: String
        nameSchedule_not: String
        nameSchedule_in: [String!]
        nameSchedule_not_in: [String!]
        nameSchedule_lt: String
        nameSchedule_lte: String
        nameSchedule_gt: String
        nameSchedule_gte: String
        nameSchedule_contains: String
        nameSchedule_not_contains: String
        nameSchedule_starts_with: String
        nameSchedule_not_starts_with: String
        nameSchedule_ends_with: String
        nameSchedule_not_ends_with: String
        owner: AdminWhereInput
        year: Int
        year_not: Int
        year_in: [Int!]
        year_not_in: [Int!]
        year_lt: Int
        year_lte: Int
        year_gt: Int
        year_gte: Int
        month: MonthWhereInput
        amountOfWorkingHours: Float
        amountOfWorkingHours_not: Float
        amountOfWorkingHours_in: [Float!]
        amountOfWorkingHours_not_in: [Float!]
        amountOfWorkingHours_lt: Float
        amountOfWorkingHours_lte: Float
        amountOfWorkingHours_gt: Float
        amountOfWorkingHours_gte: Float
        typeOfWeek: Float
        typeOfWeek_not: Float
        typeOfWeek_in: [Float!]
        typeOfWeek_not_in: [Float!]
        typeOfWeek_lt: Float
        typeOfWeek_lte: Float
        typeOfWeek_gt: Float
        typeOfWeek_gte: Float
        theader: String
        theader_not: String
        theader_in: [String!]
        theader_not_in: [String!]
        theader_lt: String
        theader_lte: String
        theader_gt: String
        theader_gte: String
        theader_contains: String
        theader_not_contains: String
        theader_starts_with: String
        theader_not_starts_with: String
        theader_ends_with: String
        theader_not_ends_with: String
        employees_some: EmployeeWhereInput
        employees_every: EmployeeRestrictedWhereInput
        employees_none: EmployeeRestrictedWhereInput
        AND: [ScheduleWhereInput!]
      }

      input ScheduleWhereUniqueInput {
        id: ID
      }

      type SecondLunchTime {
        startSecondLunch: String!
        endSecondLunch: String!
      }

      input SecondLunchTimeCreateInput {
        startSecondLunch: String!
        endSecondLunch: String!
      }

      input SecondLunchTimeCreateOneInput {
        create: SecondLunchTimeCreateInput
      }

      type SecondLunchTimeE {
        startSecondLunch: String!
        endSecondLunch: String!
      }

      input SecondLunchTimeECreateInput {
        startSecondLunch: String!
        endSecondLunch: String!
      }

      input SecondLunchTimeECreateOneInput {
        create: SecondLunchTimeECreateInput
      }

      input SecondLunchTimeERestrictedWhereInput {
        startSecondLunch: String
        startSecondLunch_not: String
        startSecondLunch_in: [String!]
        startSecondLunch_not_in: [String!]
        startSecondLunch_lt: String
        startSecondLunch_lte: String
        startSecondLunch_gt: String
        startSecondLunch_gte: String
        startSecondLunch_contains: String
        startSecondLunch_not_contains: String
        startSecondLunch_starts_with: String
        startSecondLunch_not_starts_with: String
        startSecondLunch_ends_with: String
        startSecondLunch_not_ends_with: String
        endSecondLunch: String
        endSecondLunch_not: String
        endSecondLunch_in: [String!]
        endSecondLunch_not_in: [String!]
        endSecondLunch_lt: String
        endSecondLunch_lte: String
        endSecondLunch_gt: String
        endSecondLunch_gte: String
        endSecondLunch_contains: String
        endSecondLunch_not_contains: String
        endSecondLunch_starts_with: String
        endSecondLunch_not_starts_with: String
        endSecondLunch_ends_with: String
        endSecondLunch_not_ends_with: String
        AND: [SecondLunchTimeERestrictedWhereInput!]
      }

      input SecondLunchTimeEUpdateDataInput {
        startSecondLunch: String
        endSecondLunch: String
      }

      input SecondLunchTimeEUpdateOneInput {
        create: SecondLunchTimeECreateInput
        update: SecondLunchTimeEUpdateDataInput
        upsert: SecondLunchTimeEUpsertNestedInput
        delete: Boolean
        disconnect: Boolean
      }

      input SecondLunchTimeEUpsertNestedInput {
        update: SecondLunchTimeEUpdateDataInput!
        create: SecondLunchTimeECreateInput!
      }

      input SecondLunchTimeEWhereInput {
        startSecondLunch: String
        startSecondLunch_not: String
        startSecondLunch_in: [String!]
        startSecondLunch_not_in: [String!]
        startSecondLunch_lt: String
        startSecondLunch_lte: String
        startSecondLunch_gt: String
        startSecondLunch_gte: String
        startSecondLunch_contains: String
        startSecondLunch_not_contains: String
        startSecondLunch_starts_with: String
        startSecondLunch_not_starts_with: String
        startSecondLunch_ends_with: String
        startSecondLunch_not_ends_with: String
        endSecondLunch: String
        endSecondLunch_not: String
        endSecondLunch_in: [String!]
        endSecondLunch_not_in: [String!]
        endSecondLunch_lt: String
        endSecondLunch_lte: String
        endSecondLunch_gt: String
        endSecondLunch_gte: String
        endSecondLunch_contains: String
        endSecondLunch_not_contains: String
        endSecondLunch_starts_with: String
        endSecondLunch_not_starts_with: String
        endSecondLunch_ends_with: String
        endSecondLunch_not_ends_with: String
        AND: [SecondLunchTimeEWhereInput!]
      }

      input SecondLunchTimeUpdateDataInput {
        startSecondLunch: String
        endSecondLunch: String
      }

      input SecondLunchTimeUpdateOneInput {
        create: SecondLunchTimeCreateInput
        update: SecondLunchTimeUpdateDataInput
        upsert: SecondLunchTimeUpsertNestedInput
        delete: Boolean
        disconnect: Boolean
      }

      input SecondLunchTimeUpsertNestedInput {
        update: SecondLunchTimeUpdateDataInput!
        create: SecondLunchTimeCreateInput!
      }

      input SecondLunchTimeWhereInput {
        startSecondLunch: String
        startSecondLunch_not: String
        startSecondLunch_in: [String!]
        startSecondLunch_not_in: [String!]
        startSecondLunch_lt: String
        startSecondLunch_lte: String
        startSecondLunch_gt: String
        startSecondLunch_gte: String
        startSecondLunch_contains: String
        startSecondLunch_not_contains: String
        startSecondLunch_starts_with: String
        startSecondLunch_not_starts_with: String
        startSecondLunch_ends_with: String
        startSecondLunch_not_ends_with: String
        endSecondLunch: String
        endSecondLunch_not: String
        endSecondLunch_in: [String!]
        endSecondLunch_not_in: [String!]
        endSecondLunch_lt: String
        endSecondLunch_lte: String
        endSecondLunch_gt: String
        endSecondLunch_gte: String
        endSecondLunch_contains: String
        endSecondLunch_not_contains: String
        endSecondLunch_starts_with: String
        endSecondLunch_not_starts_with: String
        endSecondLunch_ends_with: String
        endSecondLunch_not_ends_with: String
        AND: [SecondLunchTimeWhereInput!]
      }

      type SecondWorkTime {
        startSecondWork: String!
        endSecondWork: String!
      }

      input SecondWorkTimeCreateInput {
        startSecondWork: String!
        endSecondWork: String!
      }

      input SecondWorkTimeCreateOneInput {
        create: SecondWorkTimeCreateInput
      }

      type SecondWorkTimeE {
        startSecondWork: String!
        endSecondWork: String!
      }

      input SecondWorkTimeECreateInput {
        startSecondWork: String!
        endSecondWork: String!
      }

      input SecondWorkTimeECreateOneInput {
        create: SecondWorkTimeECreateInput
      }

      input SecondWorkTimeERestrictedWhereInput {
        startSecondWork: String
        startSecondWork_not: String
        startSecondWork_in: [String!]
        startSecondWork_not_in: [String!]
        startSecondWork_lt: String
        startSecondWork_lte: String
        startSecondWork_gt: String
        startSecondWork_gte: String
        startSecondWork_contains: String
        startSecondWork_not_contains: String
        startSecondWork_starts_with: String
        startSecondWork_not_starts_with: String
        startSecondWork_ends_with: String
        startSecondWork_not_ends_with: String
        endSecondWork: String
        endSecondWork_not: String
        endSecondWork_in: [String!]
        endSecondWork_not_in: [String!]
        endSecondWork_lt: String
        endSecondWork_lte: String
        endSecondWork_gt: String
        endSecondWork_gte: String
        endSecondWork_contains: String
        endSecondWork_not_contains: String
        endSecondWork_starts_with: String
        endSecondWork_not_starts_with: String
        endSecondWork_ends_with: String
        endSecondWork_not_ends_with: String
        AND: [SecondWorkTimeERestrictedWhereInput!]
      }

      input SecondWorkTimeEUpdateDataInput {
        startSecondWork: String
        endSecondWork: String
      }

      input SecondWorkTimeEUpdateOneInput {
        create: SecondWorkTimeECreateInput
        update: SecondWorkTimeEUpdateDataInput
        upsert: SecondWorkTimeEUpsertNestedInput
        delete: Boolean
        disconnect: Boolean
      }

      input SecondWorkTimeEUpsertNestedInput {
        update: SecondWorkTimeEUpdateDataInput!
        create: SecondWorkTimeECreateInput!
      }

      input SecondWorkTimeEWhereInput {
        startSecondWork: String
        startSecondWork_not: String
        startSecondWork_in: [String!]
        startSecondWork_not_in: [String!]
        startSecondWork_lt: String
        startSecondWork_lte: String
        startSecondWork_gt: String
        startSecondWork_gte: String
        startSecondWork_contains: String
        startSecondWork_not_contains: String
        startSecondWork_starts_with: String
        startSecondWork_not_starts_with: String
        startSecondWork_ends_with: String
        startSecondWork_not_ends_with: String
        endSecondWork: String
        endSecondWork_not: String
        endSecondWork_in: [String!]
        endSecondWork_not_in: [String!]
        endSecondWork_lt: String
        endSecondWork_lte: String
        endSecondWork_gt: String
        endSecondWork_gte: String
        endSecondWork_contains: String
        endSecondWork_not_contains: String
        endSecondWork_starts_with: String
        endSecondWork_not_starts_with: String
        endSecondWork_ends_with: String
        endSecondWork_not_ends_with: String
        AND: [SecondWorkTimeEWhereInput!]
      }

      input SecondWorkTimeUpdateDataInput {
        startSecondWork: String
        endSecondWork: String
      }

      input SecondWorkTimeUpdateOneInput {
        create: SecondWorkTimeCreateInput
        update: SecondWorkTimeUpdateDataInput
        upsert: SecondWorkTimeUpsertNestedInput
        delete: Boolean
        disconnect: Boolean
      }

      input SecondWorkTimeUpsertNestedInput {
        update: SecondWorkTimeUpdateDataInput!
        create: SecondWorkTimeCreateInput!
      }

      input SecondWorkTimeWhereInput {
        startSecondWork: String
        startSecondWork_not: String
        startSecondWork_in: [String!]
        startSecondWork_not_in: [String!]
        startSecondWork_lt: String
        startSecondWork_lte: String
        startSecondWork_gt: String
        startSecondWork_gte: String
        startSecondWork_contains: String
        startSecondWork_not_contains: String
        startSecondWork_starts_with: String
        startSecondWork_not_starts_with: String
        startSecondWork_ends_with: String
        startSecondWork_not_ends_with: String
        endSecondWork: String
        endSecondWork_not: String
        endSecondWork_in: [String!]
        endSecondWork_not_in: [String!]
        endSecondWork_lt: String
        endSecondWork_lte: String
        endSecondWork_gt: String
        endSecondWork_gte: String
        endSecondWork_contains: String
        endSecondWork_not_contains: String
        endSecondWork_starts_with: String
        endSecondWork_not_starts_with: String
        endSecondWork_ends_with: String
        endSecondWork_not_ends_with: String
        AND: [SecondWorkTimeWhereInput!]
      }

      type Subscription {
        admin(where: AdminSubscriptionWhereInput): AdminSubscriptionPayload
        schedule(
          where: ScheduleSubscriptionWhereInput
        ): ScheduleSubscriptionPayload
        user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
      }

      type User {
        id: ID!
        fullname: String!
        owner: Admin!
        position: Position!
        rateOfWork: Float
      }

      type UserConnection {
        pageInfo: PageInfo!
        edges: [UserEdge]!
        aggregate: AggregateUser!
      }

      input UserCreateInput {
        id: ID
        fullname: String!
        owner: AdminCreateOneWithoutUsersInput!
        position: PositionCreateOneInput!
        rateOfWork: Float
      }

      input UserCreateManyWithoutOwnerInput {
        create: [UserCreateWithoutOwnerInput!]
        connect: [UserWhereUniqueInput!]
      }

      input UserCreateWithoutOwnerInput {
        id: ID
        fullname: String!
        position: PositionCreateOneInput!
        rateOfWork: Float
      }

      type UserEdge {
        node: User!
        cursor: String!
      }

      enum UserOrderByInput {
        id_ASC
        id_DESC
        fullname_ASC
        fullname_DESC
        rateOfWork_ASC
        rateOfWork_DESC
      }

      type UserPreviousValues {
        id: ID!
        fullname: String!
        rateOfWork: Float
      }

      input UserScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        fullname: String
        fullname_not: String
        fullname_in: [String!]
        fullname_not_in: [String!]
        fullname_lt: String
        fullname_lte: String
        fullname_gt: String
        fullname_gte: String
        fullname_contains: String
        fullname_not_contains: String
        fullname_starts_with: String
        fullname_not_starts_with: String
        fullname_ends_with: String
        fullname_not_ends_with: String
        rateOfWork: Float
        rateOfWork_not: Float
        rateOfWork_in: [Float!]
        rateOfWork_not_in: [Float!]
        rateOfWork_lt: Float
        rateOfWork_lte: Float
        rateOfWork_gt: Float
        rateOfWork_gte: Float
        AND: [UserScalarWhereInput!]
        OR: [UserScalarWhereInput!]
        NOT: [UserScalarWhereInput!]
      }

      type UserSubscriptionPayload {
        mutation: MutationType!
        node: User
        updatedFields: [String!]
        previousValues: UserPreviousValues
      }

      input UserSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: UserWhereInput
        AND: [UserSubscriptionWhereInput!]
      }

      input UserUpdateInput {
        fullname: String
        owner: AdminUpdateOneRequiredWithoutUsersInput
        position: PositionUpdateOneRequiredInput
        rateOfWork: Float
      }

      input UserUpdateManyDataInput {
        fullname: String
        rateOfWork: Float
      }

      input UserUpdateManyMutationInput {
        fullname: String
        rateOfWork: Float
      }

      input UserUpdateManyWithoutOwnerInput {
        create: [UserCreateWithoutOwnerInput!]
        delete: [UserWhereUniqueInput!]
        connect: [UserWhereUniqueInput!]
        set: [UserWhereUniqueInput!]
        disconnect: [UserWhereUniqueInput!]
        update: [UserUpdateWithWhereUniqueWithoutOwnerInput!]
        upsert: [UserUpsertWithWhereUniqueWithoutOwnerInput!]
        deleteMany: [UserScalarWhereInput!]
        updateMany: [UserUpdateManyWithWhereNestedInput!]
      }

      input UserUpdateManyWithWhereNestedInput {
        where: UserScalarWhereInput!
        data: UserUpdateManyDataInput!
      }

      input UserUpdateWithoutOwnerDataInput {
        fullname: String
        position: PositionUpdateOneRequiredInput
        rateOfWork: Float
      }

      input UserUpdateWithWhereUniqueWithoutOwnerInput {
        where: UserWhereUniqueInput!
        data: UserUpdateWithoutOwnerDataInput!
      }

      input UserUpsertWithWhereUniqueWithoutOwnerInput {
        where: UserWhereUniqueInput!
        update: UserUpdateWithoutOwnerDataInput!
        create: UserCreateWithoutOwnerInput!
      }

      input UserWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        fullname: String
        fullname_not: String
        fullname_in: [String!]
        fullname_not_in: [String!]
        fullname_lt: String
        fullname_lte: String
        fullname_gt: String
        fullname_gte: String
        fullname_contains: String
        fullname_not_contains: String
        fullname_starts_with: String
        fullname_not_starts_with: String
        fullname_ends_with: String
        fullname_not_ends_with: String
        owner: AdminWhereInput
        position: PositionWhereInput
        rateOfWork: Float
        rateOfWork_not: Float
        rateOfWork_in: [Float!]
        rateOfWork_not_in: [Float!]
        rateOfWork_lt: Float
        rateOfWork_lte: Float
        rateOfWork_gt: Float
        rateOfWork_gte: Float
        AND: [UserWhereInput!]
      }

      input UserWhereUniqueInput {
        id: ID
      }

      type Weekday {
        num: Int!
        id: String!
        isChecked: Boolean!
      }

      input WeekdayCreateInput {
        num: Int!
        id: String!
        isChecked: Boolean!
      }

      input WeekdayCreateManyInput {
        create: [WeekdayCreateInput!]
      }

      input WeekdayRestrictedWhereInput {
        num: Int
        num_not: Int
        num_in: [Int!]
        num_not_in: [Int!]
        num_lt: Int
        num_lte: Int
        num_gt: Int
        num_gte: Int
        id: String
        id_not: String
        id_in: [String!]
        id_not_in: [String!]
        id_lt: String
        id_lte: String
        id_gt: String
        id_gte: String
        id_contains: String
        id_not_contains: String
        id_starts_with: String
        id_not_starts_with: String
        id_ends_with: String
        id_not_ends_with: String
        isChecked: Boolean
        isChecked_not: Boolean
        AND: [WeekdayRestrictedWhereInput!]
      }

      input WeekdayScalarWhereInput {
        num: Int
        num_not: Int
        num_in: [Int!]
        num_not_in: [Int!]
        num_lt: Int
        num_lte: Int
        num_gt: Int
        num_gte: Int
        id: String
        id_not: String
        id_in: [String!]
        id_not_in: [String!]
        id_lt: String
        id_lte: String
        id_gt: String
        id_gte: String
        id_contains: String
        id_not_contains: String
        id_starts_with: String
        id_not_starts_with: String
        id_ends_with: String
        id_not_ends_with: String
        isChecked: Boolean
        isChecked_not: Boolean
        AND: [WeekdayScalarWhereInput!]
        OR: [WeekdayScalarWhereInput!]
        NOT: [WeekdayScalarWhereInput!]
      }

      input WeekdayUpdateManyDataInput {
        num: Int
        id: String
        isChecked: Boolean
      }

      input WeekdayUpdateManyInput {
        create: [WeekdayCreateInput!]
        deleteMany: [WeekdayScalarWhereInput!]
        updateMany: [WeekdayUpdateManyWithWhereNestedInput!]
      }

      input WeekdayUpdateManyWithWhereNestedInput {
        where: WeekdayScalarWhereInput!
        data: WeekdayUpdateManyDataInput!
      }

      input WeekdayWhereInput {
        num: Int
        num_not: Int
        num_in: [Int!]
        num_not_in: [Int!]
        num_lt: Int
        num_lte: Int
        num_gt: Int
        num_gte: Int
        id: String
        id_not: String
        id_in: [String!]
        id_not_in: [String!]
        id_lt: String
        id_lte: String
        id_gt: String
        id_gte: String
        id_contains: String
        id_not_contains: String
        id_starts_with: String
        id_not_starts_with: String
        id_ends_with: String
        id_not_ends_with: String
        isChecked: Boolean
        isChecked_not: Boolean
        AND: [WeekdayWhereInput!]
      }

      type Weekend {
        num: Int!
        id: String!
        isChecked: Boolean!
      }

      input WeekendCreateInput {
        num: Int!
        id: String!
        isChecked: Boolean!
      }

      input WeekendCreateManyInput {
        create: [WeekendCreateInput!]
      }

      input WeekendRestrictedWhereInput {
        num: Int
        num_not: Int
        num_in: [Int!]
        num_not_in: [Int!]
        num_lt: Int
        num_lte: Int
        num_gt: Int
        num_gte: Int
        id: String
        id_not: String
        id_in: [String!]
        id_not_in: [String!]
        id_lt: String
        id_lte: String
        id_gt: String
        id_gte: String
        id_contains: String
        id_not_contains: String
        id_starts_with: String
        id_not_starts_with: String
        id_ends_with: String
        id_not_ends_with: String
        isChecked: Boolean
        isChecked_not: Boolean
        AND: [WeekendRestrictedWhereInput!]
      }

      input WeekendScalarWhereInput {
        num: Int
        num_not: Int
        num_in: [Int!]
        num_not_in: [Int!]
        num_lt: Int
        num_lte: Int
        num_gt: Int
        num_gte: Int
        id: String
        id_not: String
        id_in: [String!]
        id_not_in: [String!]
        id_lt: String
        id_lte: String
        id_gt: String
        id_gte: String
        id_contains: String
        id_not_contains: String
        id_starts_with: String
        id_not_starts_with: String
        id_ends_with: String
        id_not_ends_with: String
        isChecked: Boolean
        isChecked_not: Boolean
        AND: [WeekendScalarWhereInput!]
        OR: [WeekendScalarWhereInput!]
        NOT: [WeekendScalarWhereInput!]
      }

      input WeekendUpdateManyDataInput {
        num: Int
        id: String
        isChecked: Boolean
      }

      input WeekendUpdateManyInput {
        create: [WeekendCreateInput!]
        deleteMany: [WeekendScalarWhereInput!]
        updateMany: [WeekendUpdateManyWithWhereNestedInput!]
      }

      input WeekendUpdateManyWithWhereNestedInput {
        where: WeekendScalarWhereInput!
        data: WeekendUpdateManyDataInput!
      }

      input WeekendWhereInput {
        num: Int
        num_not: Int
        num_in: [Int!]
        num_not_in: [Int!]
        num_lt: Int
        num_lte: Int
        num_gt: Int
        num_gte: Int
        id: String
        id_not: String
        id_in: [String!]
        id_not_in: [String!]
        id_lt: String
        id_lte: String
        id_gt: String
        id_gte: String
        id_contains: String
        id_not_contains: String
        id_starts_with: String
        id_not_starts_with: String
        id_ends_with: String
        id_not_ends_with: String
        isChecked: Boolean
        isChecked_not: Boolean
        AND: [WeekendWhereInput!]
      }

      type WorkTime {
        startWork: String!
        endWork: String!
      }

      input WorkTimeCreateInput {
        startWork: String!
        endWork: String!
      }

      input WorkTimeCreateOneInput {
        create: WorkTimeCreateInput
      }

      type WorkTimeE {
        startWork: String!
        endWork: String!
      }

      input WorkTimeECreateInput {
        startWork: String!
        endWork: String!
      }

      input WorkTimeECreateOneInput {
        create: WorkTimeECreateInput
      }

      input WorkTimeERestrictedWhereInput {
        startWork: String
        startWork_not: String
        startWork_in: [String!]
        startWork_not_in: [String!]
        startWork_lt: String
        startWork_lte: String
        startWork_gt: String
        startWork_gte: String
        startWork_contains: String
        startWork_not_contains: String
        startWork_starts_with: String
        startWork_not_starts_with: String
        startWork_ends_with: String
        startWork_not_ends_with: String
        endWork: String
        endWork_not: String
        endWork_in: [String!]
        endWork_not_in: [String!]
        endWork_lt: String
        endWork_lte: String
        endWork_gt: String
        endWork_gte: String
        endWork_contains: String
        endWork_not_contains: String
        endWork_starts_with: String
        endWork_not_starts_with: String
        endWork_ends_with: String
        endWork_not_ends_with: String
        AND: [WorkTimeERestrictedWhereInput!]
      }

      input WorkTimeEUpdateDataInput {
        startWork: String
        endWork: String
      }

      input WorkTimeEUpdateOneRequiredInput {
        create: WorkTimeECreateInput
        update: WorkTimeEUpdateDataInput
        upsert: WorkTimeEUpsertNestedInput
      }

      input WorkTimeEUpsertNestedInput {
        update: WorkTimeEUpdateDataInput!
        create: WorkTimeECreateInput!
      }

      input WorkTimeEWhereInput {
        startWork: String
        startWork_not: String
        startWork_in: [String!]
        startWork_not_in: [String!]
        startWork_lt: String
        startWork_lte: String
        startWork_gt: String
        startWork_gte: String
        startWork_contains: String
        startWork_not_contains: String
        startWork_starts_with: String
        startWork_not_starts_with: String
        startWork_ends_with: String
        startWork_not_ends_with: String
        endWork: String
        endWork_not: String
        endWork_in: [String!]
        endWork_not_in: [String!]
        endWork_lt: String
        endWork_lte: String
        endWork_gt: String
        endWork_gte: String
        endWork_contains: String
        endWork_not_contains: String
        endWork_starts_with: String
        endWork_not_starts_with: String
        endWork_ends_with: String
        endWork_not_ends_with: String
        AND: [WorkTimeEWhereInput!]
      }

      input WorkTimeUpdateDataInput {
        startWork: String
        endWork: String
      }

      input WorkTimeUpdateOneRequiredInput {
        create: WorkTimeCreateInput
        update: WorkTimeUpdateDataInput
        upsert: WorkTimeUpsertNestedInput
      }

      input WorkTimeUpsertNestedInput {
        update: WorkTimeUpdateDataInput!
        create: WorkTimeCreateInput!
      }

      input WorkTimeWhereInput {
        startWork: String
        startWork_not: String
        startWork_in: [String!]
        startWork_not_in: [String!]
        startWork_lt: String
        startWork_lte: String
        startWork_gt: String
        startWork_gte: String
        startWork_contains: String
        startWork_not_contains: String
        startWork_starts_with: String
        startWork_not_starts_with: String
        startWork_ends_with: String
        startWork_not_ends_with: String
        endWork: String
        endWork_not: String
        endWork_in: [String!]
        endWork_not_in: [String!]
        endWork_lt: String
        endWork_lte: String
        endWork_gt: String
        endWork_gte: String
        endWork_contains: String
        endWork_not_contains: String
        endWork_starts_with: String
        endWork_not_starts_with: String
        endWork_ends_with: String
        endWork_not_ends_with: String
        AND: [WorkTimeWhereInput!]
      }
    `,
};
